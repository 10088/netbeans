/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.java.disco;

import eu.hansolo.jdktools.Architecture;
import eu.hansolo.jdktools.Latest;
import eu.hansolo.jdktools.PackageType;
import eu.hansolo.jdktools.TermOfSupport;
import io.foojay.api.discoclient.pkg.Distribution;
import io.foojay.api.discoclient.pkg.Pkg;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.TableModel;
import org.checkerframework.checker.guieffect.qual.UIEffect;
import org.checkerframework.checker.nullness.qual.Nullable;

public abstract class AdvancedPanel extends javax.swing.JPanel {

    protected BundleTableModel tableModel;
    private final DefaultComboBoxModel<Distribution> distrosModel;

    public AdvancedPanel() {
        distrosModel = new DefaultComboBoxModel<>();
        initComponents();

        distributionComboBox.setRenderer(new DistributionListCellRenderer());
        versionComboBox.setRenderer(new VersionListCellRenderer());
        packageTypeComboBox.setRenderer(new PackageTypeListCellRenderer());
        architectureComboBox.setRenderer(new ArchitectureListCellRenderer());
        architectureComboBox.setSelectedItem(OS.getArchitecture());
    }

    @UIEffect
    public @Nullable
    Pkg getSelectedPackage() {
        int index = table.getSelectedRow();
        if (index < 0) {
            return null;
        }
        int modelIndex = table.convertRowIndexToModel(index);
        Pkg bundle = tableModel.getBundles().get(modelIndex);
        return bundle;
    }

    private TableModel createTableModel() {
        if (tableModel == null) {
            tableModel = new BundleTableModel(new ArrayList<>());
        }

        return tableModel;
    }

    @UIEffect
    protected abstract void updateData(Distribution distribution, Integer featureVersion, Architecture architecture, Latest latest, PackageType bundleType);

    protected void updateDistributions(List<Distribution> distros) {
        distrosModel.removeAllElements();
        distros.stream()
                .sorted((o1, o2) -> o1.getUiString().compareTo(o2.getUiString()))
                .forEachOrdered(distrosModel::addElement);
        Client.getInstance().getDistribution(
                DiscoPlatformInstall.defaultDistribution())
                .filter(distros::contains)
                .ifPresent(distrosModel::setSelectedItem);
    }
    
    protected void setVersions(List<Integer> versions, Map<Integer, TermOfSupport> lts) {
        List<Integer> reversedVersions = new ArrayList<>(versions);
        reversedVersions.sort(Collections.reverseOrder());
        ((VersionListCellRenderer) versionComboBox.getRenderer()).setLTS(lts);
        DefaultComboBoxModel versionModel = (DefaultComboBoxModel<Integer>) versionComboBox.getModel();
        reversedVersions.forEach(v -> versionModel.addElement(v));
        versionModel.setSelectedItem(LTSes.latest(lts));
    }

    private ComboBoxModel<Integer> createVersionComboboxModel() {
        return new DefaultComboBoxModel<>();
    }

    private ComboBoxModel<Distribution> createDistributionComboboxModel() {
        return distrosModel;
    }

    private ComboBoxModel<PackageType> createPackageTypeComboboxModel() {
        PackageType[] bundleTypes = Arrays.stream(PackageType.values())
                .filter(bundleType -> PackageType.NONE != bundleType)
                .filter(bundleType -> PackageType.NOT_FOUND != bundleType).toArray(PackageType[]::new);
        return new DefaultComboBoxModel<>(bundleTypes);
    }

    private ComboBoxModel<Architecture> createArchitectureComboboxModel() {
        return new DefaultComboBoxModel<>(Architecture.values());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel filterPanel = new javax.swing.JPanel();
        javax.swing.JPanel distributionsPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        distributionComboBox = new javax.swing.JComboBox<>();
        javax.swing.JPanel versionsPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        versionComboBox = new javax.swing.JComboBox<>();
        javax.swing.JPanel architecturePanel = new javax.swing.JPanel();
        javax.swing.JLabel architectureLabel = new javax.swing.JLabel();
        architectureComboBox = new javax.swing.JComboBox<>();
        javax.swing.JPanel typePanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        packageTypeComboBox = new javax.swing.JComboBox<>();
        javax.swing.JPanel latestPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        latestCheckBox = new javax.swing.JCheckBox();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        filterPanel.setLayout(new javax.swing.BoxLayout(filterPanel, javax.swing.BoxLayout.LINE_AXIS));

        distributionsPanel.setLayout(new javax.swing.BoxLayout(distributionsPanel, javax.swing.BoxLayout.Y_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AdvancedPanel.class, "AdvancedPanel.jLabel1.text")); // NOI18N
        distributionsPanel.add(jLabel1);

        distributionComboBox.setModel(createDistributionComboboxModel());
        distributionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributionComboBoxActionPerformed(evt);
            }
        });
        distributionsPanel.add(distributionComboBox);

        filterPanel.add(distributionsPanel);

        versionsPanel.setLayout(new javax.swing.BoxLayout(versionsPanel, javax.swing.BoxLayout.Y_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AdvancedPanel.class, "AdvancedPanel.jLabel2.text")); // NOI18N
        versionsPanel.add(jLabel2);

        versionComboBox.setModel(createVersionComboboxModel());
        versionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                versionComboBoxActionPerformed(evt);
            }
        });
        versionsPanel.add(versionComboBox);

        filterPanel.add(versionsPanel);

        architecturePanel.setLayout(new javax.swing.BoxLayout(architecturePanel, javax.swing.BoxLayout.Y_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(architectureLabel, org.openide.util.NbBundle.getMessage(AdvancedPanel.class, "AdvancedPanel.architectureLabel.text")); // NOI18N
        architecturePanel.add(architectureLabel);

        architectureComboBox.setModel(createArchitectureComboboxModel());
        architectureComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                architectureComboBoxActionPerformed(evt);
            }
        });
        architecturePanel.add(architectureComboBox);

        filterPanel.add(architecturePanel);

        typePanel.setLayout(new javax.swing.BoxLayout(typePanel, javax.swing.BoxLayout.Y_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(AdvancedPanel.class, "AdvancedPanel.jLabel3.text")); // NOI18N
        typePanel.add(jLabel3);

        packageTypeComboBox.setModel(createPackageTypeComboboxModel());
        packageTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packageTypeComboBoxActionPerformed(evt);
            }
        });
        typePanel.add(packageTypeComboBox);

        filterPanel.add(typePanel);

        latestPanel.setLayout(new javax.swing.BoxLayout(latestPanel, javax.swing.BoxLayout.Y_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(AdvancedPanel.class, "AdvancedPanel.jLabel4.text")); // NOI18N
        latestPanel.add(jLabel4);

        latestCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(latestCheckBox, org.openide.util.NbBundle.getMessage(AdvancedPanel.class, "AdvancedPanel.latestCheckBox.text")); // NOI18N
        latestCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latestCheckBoxActionPerformed(evt);
            }
        });
        latestPanel.add(latestCheckBox);

        filterPanel.add(latestPanel);

        table.setAutoCreateRowSorter(true);
        table.setModel(createTableModel());
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableScrollPane.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void latestCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latestCheckBoxActionPerformed
        filterChanged();
    }//GEN-LAST:event_latestCheckBoxActionPerformed

    private void distributionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributionComboBoxActionPerformed
        filterChanged();
    }//GEN-LAST:event_distributionComboBoxActionPerformed

    private void versionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_versionComboBoxActionPerformed
        filterChanged();
    }//GEN-LAST:event_versionComboBoxActionPerformed

    private void packageTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packageTypeComboBoxActionPerformed
        filterChanged();
    }//GEN-LAST:event_packageTypeComboBoxActionPerformed

    private void architectureComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_architectureComboBoxActionPerformed
        filterChanged();
    }//GEN-LAST:event_architectureComboBoxActionPerformed

    private void filterChanged() {
        updateData( (Distribution) distributionComboBox.getSelectedItem(),
                    (Integer) versionComboBox.getSelectedItem(),
                    (Architecture) architectureComboBox.getSelectedItem(),
                    latestCheckBox.isSelected() ? Latest.OVERALL : Latest.NONE,
                    (PackageType) packageTypeComboBox.getSelectedItem());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Architecture> architectureComboBox;
    private javax.swing.JComboBox<Distribution> distributionComboBox;
    private javax.swing.JCheckBox latestCheckBox;
    private javax.swing.JComboBox<PackageType> packageTypeComboBox;
    protected javax.swing.JTable table;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JComboBox<Integer> versionComboBox;
    // End of variables declaration//GEN-END:variables
}
